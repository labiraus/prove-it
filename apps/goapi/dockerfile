ARG  BUILDER_IMAGE=golang:alpine
############################
# STEP 1 build executable binary
############################
FROM ${BUILDER_IMAGE} AS builder

# Install git + SSL ca certificates.
# Git is required for fetching the dependencies.
# Ca-certificates is required to call HTTPS endpoints.
RUN apk update && apk add --no-cache git ca-certificates tzdata && update-ca-certificates
ENV APP_NAME=goapi

# Create appuser
ENV USER=appuser
ENV UID=10001

# See https://stackoverflow.com/a/55757473/12429735
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    "${USER}"

# Copy source code from local directories
WORKDIR $GOPATH/src/
COPY ./go.work ./go.work
COPY ./go.work.sum ./go.work.sum
COPY ./pkg/ ./pkg/

# Downloading the go modules in advance takes advantage of docker's caching
# WORKDIR $GOPATH/src/app/
COPY $APP_NAME/go.mod $APP_NAME/go.sum ./$APP_NAME/
RUN go mod download

# WORKDIR $GOPATH/src/$APP_NAME/
COPY $APP_NAME/. ./$APP_NAME

# Build the binary
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -extldflags "-static"' -a \
    -o /go/bin/app ./$APP_NAME

############################
# STEP 2 build a small image
############################
FROM scratch
EXPOSE 8080

# Set the maintainer
LABEL org.opencontainers.image.source=https://github.com/labiraus/prove-it

# Import from builder.
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /etc/group /etc/group

# Copy our static executable
COPY --from=builder /go/bin/app /go/bin/app

# Use an unprivileged user.
USER appuser:appuser

# Run the app binary.
ENTRYPOINT ["/go/bin/app"]
